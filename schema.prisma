// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          Int        @id @default(autoincrement())
  name        String
  email       String     @unique
  password    String
  role        Role       @default(STAFF)
  permissions Json       @default("{}")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  employee    Employee?
}

model Employee {
  id          Int         @id @default(autoincrement())
  name        String
  email       String      @unique
  password    String
  role        Role        @default(STAFF)
  startDate   DateTime
  status      Status      @default(ACTIVE)
  salary      Float       @default(0)
  userId      Int         @unique
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  attendance  Attendance[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Attendance {
  id          Int                @id @default(autoincrement())
  employeeId  Int
  employee    Employee           @relation(fields: [employeeId], references: [id])
  date        DateTime
  checkIn     DateTime?
  checkOut    DateTime?
  status      AttendanceStatus   @default(PRESENT)
}

model StockType {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  stockItems StockItem[]
}

model StockItem {
  id              Int               @id @default(autoincrement())
  name            String
  image           String?
  stockTypeId     Int
  quantityType    QuantityType
  totalQuantity   Int
  totalWeight     Float?
  finalAmount     Float
  status          StockStatus       @default(ACTIVE)
  stockType       StockType         @relation(fields: [stockTypeId], references: [id])
  stockEntryItems StockEntryItem[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model StockEntry {
  id           Int              @id @default(autoincrement())
  partyName    String           // Supplier name
  dateReceived DateTime
  stockItems   StockEntryItem[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model StockEntryItem {
  id            Int         @id @default(autoincrement())
  stockEntryId  Int
  stockItemId   Int
  stockEntry    StockEntry  @relation(fields: [stockEntryId], references: [id], onDelete: Cascade)
  stockItem     StockItem   @relation(fields: [stockItemId], references: [id], onDelete: Cascade)
}

model Party {
  id                 Int                @id @default(autoincrement())
  name               String
  shortCode          String             @unique
  partyCompanyName   String
  phoneNumber        String
  address            String?
  reference          String?
  jobWorkRateDetails JobWorkRateDetails?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model JobWorkRateDetails {
  id                          Int     @id @default(autoincrement())
  partyId                     Int     @unique
  printCharge1C1SP            Float?
  printCharge2C               Float?
  printCharge3C1SP            Float?
  printCharge4C               Float?
  printCharge5C               Float?
  printCharge3SP              Float?
  printCharge4SP              Float?
  printCharge2SP              Float?
  dropOffRate                 Float?
  varnishRate                 Float?
  laminationRateSqInch        Float?
  pateAdd                     Float?
  pateLess                    Float?
  minSheetsPerColorChange     Int?
  microRate                   Float?
  punchingRate                Float?
  uvRate                      Float?
  windowRate                  Float?
  foilRate                    Float?
  scodixRate                  Float?
  pastingRate                 Float?
  party                       Party   @relation(fields: [partyId], references: [id], onDelete: Cascade)
}

enum Role {
  SUPER_ADMIN
  ADMIN
  STAFF
}

enum Status {
  ACTIVE
  INACTIVE
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LEAVE
}

enum QuantityType {
  GROSS
  PACKET
  WEIGHT
}

enum StockStatus {
  ACTIVE
  CONSUMED
}
